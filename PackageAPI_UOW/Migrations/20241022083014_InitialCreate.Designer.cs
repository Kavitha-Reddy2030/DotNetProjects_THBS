// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PackageAPI_UOW.Data;

#nullable disable

namespace PackageAPI_UOW.Migrations
{
    [DbContext(typeof(PackageUOWDbContext))]
    [Migration("20241022083014_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Los Angeles",
                            StateId = 1
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Toronto",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "San Francisco",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "USA"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "Canada"
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PackageId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            PackageId = 1,
                            Description = "A relaxing beach holiday.",
                            PackageName = "Beach Holiday",
                            Price = 499.99m
                        },
                        new
                        {
                            PackageId = 2,
                            Description = "Explore the city's culture.",
                            PackageName = "City Tour",
                            Price = 299.99m
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.PackageCity", b =>
                {
                    b.Property<int>("PackageCityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageCityId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.HasKey("PackageCityId");

                    b.HasIndex("CityId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageCities");

                    b.HasData(
                        new
                        {
                            PackageCityId = 1,
                            CityId = 1,
                            Description = "Beach Holiday in Los Angeles",
                            PackageId = 1
                        },
                        new
                        {
                            PackageCityId = 2,
                            CityId = 2,
                            Description = "City Tour in Toronto",
                            PackageId = 2
                        },
                        new
                        {
                            PackageCityId = 3,
                            CityId = 3,
                            Description = "Beach Holiday in San Francisco",
                            PackageId = 1
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.PackageResort", b =>
                {
                    b.Property<int>("PackageResortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageResortId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ResortId")
                        .HasColumnType("int");

                    b.HasKey("PackageResortId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ResortId");

                    b.ToTable("PackageResorts");

                    b.HasData(
                        new
                        {
                            PackageResortId = 1,
                            Description = "Luxury Beach Resort",
                            PackageId = 1,
                            ResortId = 1
                        },
                        new
                        {
                            PackageResortId = 2,
                            Description = "Affordable Beach Resort",
                            PackageId = 1,
                            ResortId = 2
                        },
                        new
                        {
                            PackageResortId = 3,
                            Description = "City Resort with Amenities",
                            PackageId = 2,
                            ResortId = 3
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Resort", b =>
                {
                    b.Property<int>("ResortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResortId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ResortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResortId");

                    b.HasIndex("CityId");

                    b.ToTable("Resorts");

                    b.HasData(
                        new
                        {
                            ResortId = 1,
                            CityId = 1,
                            ResortName = "Luxury Beach Resort"
                        },
                        new
                        {
                            ResortId = 2,
                            CityId = 1,
                            ResortName = "Affordable Beach Resort"
                        },
                        new
                        {
                            ResortId = 3,
                            CityId = 2,
                            ResortName = "City Resort"
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateName")
                        .IsUnique();

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            CountryId = 1,
                            StateName = "California"
                        },
                        new
                        {
                            StateId = 2,
                            CountryId = 2,
                            StateName = "Ontario"
                        });
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.City", b =>
                {
                    b.HasOne("PackageAPI_UOW.Models.Domain.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.PackageCity", b =>
                {
                    b.HasOne("PackageAPI_UOW.Models.Domain.City", "City")
                        .WithMany("PackageCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PackageAPI_UOW.Models.Domain.Package", "Package")
                        .WithMany("PackageCities")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.PackageResort", b =>
                {
                    b.HasOne("PackageAPI_UOW.Models.Domain.Package", "Package")
                        .WithMany("PackageResorts")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PackageAPI_UOW.Models.Domain.Resort", "Resort")
                        .WithMany("PackageResorts")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Resort", b =>
                {
                    b.HasOne("PackageAPI_UOW.Models.Domain.City", "City")
                        .WithMany("Resorts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.State", b =>
                {
                    b.HasOne("PackageAPI_UOW.Models.Domain.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.City", b =>
                {
                    b.Navigation("PackageCities");

                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Package", b =>
                {
                    b.Navigation("PackageCities");

                    b.Navigation("PackageResorts");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.Resort", b =>
                {
                    b.Navigation("PackageResorts");
                });

            modelBuilder.Entity("PackageAPI_UOW.Models.Domain.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
